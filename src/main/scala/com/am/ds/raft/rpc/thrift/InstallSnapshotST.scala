/**
 * Generated by Scrooge
 *   version: 3.14.1
 *   rev: a996c1128a032845c508102d62e65fc0aa7a5f41
 *   built at: 20140501-114733
 */
package com.am.ds.raft.rpc.thrift

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object InstallSnapshotST extends ThriftStructCodec3[InstallSnapshotST] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("InstallSnapshotST")
  val StateMachineStateField = new TField("stateMachineState", TType.STRING, 1)
  val StateMachineStateFieldManifest = implicitly[Manifest[ByteBuffer]]
  val LastLogEntryIndexField = new TField("lastLogEntryIndex", TType.I64, 2)
  val LastLogEntryIndexFieldManifest = implicitly[Manifest[Long]]
  val LastLogEntryTermField = new TField("lastLogEntryTerm", TType.I32, 3)
  val LastLogEntryTermFieldManifest = implicitly[Manifest[Int]]
  val MembershipStateField = new TField("membershipState", TType.STRING, 4)
  val MembershipStateFieldManifest = implicitly[Manifest[ByteBuffer]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      StateMachineStateField,
      false,
      StateMachineStateFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      LastLogEntryIndexField,
      false,
      LastLogEntryIndexFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      LastLogEntryTermField,
      false,
      LastLogEntryTermFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      MembershipStateField,
      false,
      MembershipStateFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: InstallSnapshotST) {
    if (_item.stateMachineState == null) throw new TProtocolException("Required field stateMachineState cannot be null")
    if (_item.membershipState == null) throw new TProtocolException("Required field membershipState cannot be null")
  }

  override def encode(_item: InstallSnapshotST, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): InstallSnapshotST = {
    var stateMachineState: ByteBuffer = null
    var _got_stateMachineState = false
    var lastLogEntryIndex: Long = 0L
    var _got_lastLogEntryIndex = false
    var lastLogEntryTerm: Int = 0
    var _got_lastLogEntryTerm = false
    var membershipState: ByteBuffer = null
    var _got_membershipState = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING => {
                stateMachineState = readStateMachineStateValue(_iprot)
                _got_stateMachineState = true
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'stateMachineState' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I64 => {
                lastLogEntryIndex = readLastLogEntryIndexValue(_iprot)
                _got_lastLogEntryIndex = true
              }
              case _actualType =>
                val _expectedType = TType.I64
            
                throw new TProtocolException(
                  "Received wrong type for field 'lastLogEntryIndex' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 => {
                lastLogEntryTerm = readLastLogEntryTermValue(_iprot)
                _got_lastLogEntryTerm = true
              }
              case _actualType =>
                val _expectedType = TType.I32
            
                throw new TProtocolException(
                  "Received wrong type for field 'lastLogEntryTerm' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING => {
                membershipState = readMembershipStateValue(_iprot)
                _got_membershipState = true
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'membershipState' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_stateMachineState) throw new TProtocolException("Required field 'InstallSnapshotST' was not found in serialized data for struct InstallSnapshotST")
    if (!_got_lastLogEntryIndex) throw new TProtocolException("Required field 'InstallSnapshotST' was not found in serialized data for struct InstallSnapshotST")
    if (!_got_lastLogEntryTerm) throw new TProtocolException("Required field 'InstallSnapshotST' was not found in serialized data for struct InstallSnapshotST")
    if (!_got_membershipState) throw new TProtocolException("Required field 'InstallSnapshotST' was not found in serialized data for struct InstallSnapshotST")
    new Immutable(
      stateMachineState,
      lastLogEntryIndex,
      lastLogEntryTerm,
      membershipState,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    stateMachineState: ByteBuffer,
    lastLogEntryIndex: Long,
    lastLogEntryTerm: Int,
    membershipState: ByteBuffer
  ): InstallSnapshotST =
    new Immutable(
      stateMachineState,
      lastLogEntryIndex,
      lastLogEntryTerm,
      membershipState
    )

  def unapply(_item: InstallSnapshotST): Option[scala.Product4[ByteBuffer, Long, Int, ByteBuffer]] = Some(_item)


  private def readStateMachineStateValue(_iprot: TProtocol): ByteBuffer = {
    _iprot.readBinary()
  }

  private def writeStateMachineStateField(stateMachineState_item: ByteBuffer, _oprot: TProtocol) {
    _oprot.writeFieldBegin(StateMachineStateField)
    writeStateMachineStateValue(stateMachineState_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeStateMachineStateValue(stateMachineState_item: ByteBuffer, _oprot: TProtocol) {
    _oprot.writeBinary(stateMachineState_item)
  }

  private def readLastLogEntryIndexValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  private def writeLastLogEntryIndexField(lastLogEntryIndex_item: Long, _oprot: TProtocol) {
    _oprot.writeFieldBegin(LastLogEntryIndexField)
    writeLastLogEntryIndexValue(lastLogEntryIndex_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeLastLogEntryIndexValue(lastLogEntryIndex_item: Long, _oprot: TProtocol) {
    _oprot.writeI64(lastLogEntryIndex_item)
  }

  private def readLastLogEntryTermValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  private def writeLastLogEntryTermField(lastLogEntryTerm_item: Int, _oprot: TProtocol) {
    _oprot.writeFieldBegin(LastLogEntryTermField)
    writeLastLogEntryTermValue(lastLogEntryTerm_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeLastLogEntryTermValue(lastLogEntryTerm_item: Int, _oprot: TProtocol) {
    _oprot.writeI32(lastLogEntryTerm_item)
  }

  private def readMembershipStateValue(_iprot: TProtocol): ByteBuffer = {
    _iprot.readBinary()
  }

  private def writeMembershipStateField(membershipState_item: ByteBuffer, _oprot: TProtocol) {
    _oprot.writeFieldBegin(MembershipStateField)
    writeMembershipStateValue(membershipState_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeMembershipStateValue(membershipState_item: ByteBuffer, _oprot: TProtocol) {
    _oprot.writeBinary(membershipState_item)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[InstallSnapshotST] {
    override def encode(_item: InstallSnapshotST, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): InstallSnapshotST = InstallSnapshotST.decode(_iprot)
  }

  /**
   * The default read-only implementation of InstallSnapshotST.  You typically should not need to
   * directly reference this class; instead, use the InstallSnapshotST.apply method to construct
   * new instances.
   */
  class Immutable(
    val stateMachineState: ByteBuffer,
    val lastLogEntryIndex: Long,
    val lastLogEntryTerm: Int,
    val membershipState: ByteBuffer,
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) extends InstallSnapshotST {
    def this(
      stateMachineState: ByteBuffer,
      lastLogEntryIndex: Long,
      lastLogEntryTerm: Int,
      membershipState: ByteBuffer
    ) = this(
      stateMachineState,
      lastLogEntryIndex,
      lastLogEntryTerm,
      membershipState,
      Map.empty
    )
  }

  /**
   * This Proxy trait allows you to extend the InstallSnapshotST trait with additional state or
   * behavior and implement the read-only methods from InstallSnapshotST using an underlying
   * instance.
   */
  trait Proxy extends InstallSnapshotST {
    protected def _underlying_InstallSnapshotST: InstallSnapshotST
    override def stateMachineState: ByteBuffer = _underlying_InstallSnapshotST.stateMachineState
    override def lastLogEntryIndex: Long = _underlying_InstallSnapshotST.lastLogEntryIndex
    override def lastLogEntryTerm: Int = _underlying_InstallSnapshotST.lastLogEntryTerm
    override def membershipState: ByteBuffer = _underlying_InstallSnapshotST.membershipState
    override def _passthroughFields = _underlying_InstallSnapshotST._passthroughFields
  }
}

trait InstallSnapshotST
  extends ThriftStruct
  with scala.Product4[ByteBuffer, Long, Int, ByteBuffer]
  with java.io.Serializable
{
  import InstallSnapshotST._

  def stateMachineState: ByteBuffer
  def lastLogEntryIndex: Long
  def lastLogEntryTerm: Int
  def membershipState: ByteBuffer

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = stateMachineState
  def _2 = lastLogEntryIndex
  def _3 = lastLogEntryTerm
  def _4 = membershipState

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (stateMachineState ne null) {
              writeStateMachineStateValue(stateMachineState, _oprot)
              Some(InstallSnapshotST.StateMachineStateField)
            } else {
              None
            }
          case 2 =>
            if (true) {
              writeLastLogEntryIndexValue(lastLogEntryIndex, _oprot)
              Some(InstallSnapshotST.LastLogEntryIndexField)
            } else {
              None
            }
          case 3 =>
            if (true) {
              writeLastLogEntryTermValue(lastLogEntryTerm, _oprot)
              Some(InstallSnapshotST.LastLogEntryTermField)
            } else {
              None
            }
          case 4 =>
            if (membershipState ne null) {
              writeMembershipStateValue(membershipState, _oprot)
              Some(InstallSnapshotST.MembershipStateField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): InstallSnapshotST = {
    var stateMachineState: ByteBuffer = this.stateMachineState
    var lastLogEntryIndex: Long = this.lastLogEntryIndex
    var lastLogEntryTerm: Int = this.lastLogEntryTerm
    var membershipState: ByteBuffer = this.membershipState
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        stateMachineState = readStateMachineStateValue(_blob.read)
      case 2 =>
        lastLogEntryIndex = readLastLogEntryIndexValue(_blob.read)
      case 3 =>
        lastLogEntryTerm = readLastLogEntryTermValue(_blob.read)
      case 4 =>
        membershipState = readMembershipStateValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      stateMachineState,
      lastLogEntryIndex,
      lastLogEntryTerm,
      membershipState,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): InstallSnapshotST = {
    var stateMachineState: ByteBuffer = this.stateMachineState
    var lastLogEntryIndex: Long = this.lastLogEntryIndex
    var lastLogEntryTerm: Int = this.lastLogEntryTerm
    var membershipState: ByteBuffer = this.membershipState

    _fieldId match {
      case 1 =>
        stateMachineState = null
      case 2 =>
        lastLogEntryIndex = 0L
      case 3 =>
        lastLogEntryTerm = 0
      case 4 =>
        membershipState = null
      case _ =>
    }
    new Immutable(
      stateMachineState,
      lastLogEntryIndex,
      lastLogEntryTerm,
      membershipState,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetStateMachineState: InstallSnapshotST = unsetField(1)

  def unsetLastLogEntryIndex: InstallSnapshotST = unsetField(2)

  def unsetLastLogEntryTerm: InstallSnapshotST = unsetField(3)

  def unsetMembershipState: InstallSnapshotST = unsetField(4)


  override def write(_oprot: TProtocol) {
    InstallSnapshotST.validate(this)
    _oprot.writeStructBegin(Struct)
    if (stateMachineState ne null) writeStateMachineStateField(stateMachineState, _oprot)
    writeLastLogEntryIndexField(lastLogEntryIndex, _oprot)
    writeLastLogEntryTermField(lastLogEntryTerm, _oprot)
    if (membershipState ne null) writeMembershipStateField(membershipState, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    stateMachineState: ByteBuffer = this.stateMachineState,
    lastLogEntryIndex: Long = this.lastLogEntryIndex,
    lastLogEntryTerm: Int = this.lastLogEntryTerm,
    membershipState: ByteBuffer = this.membershipState,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): InstallSnapshotST =
    new Immutable(
      stateMachineState,
      lastLogEntryIndex,
      lastLogEntryTerm,
      membershipState,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[InstallSnapshotST]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[InstallSnapshotST]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.stateMachineState
    case 1 => this.lastLogEntryIndex
    case 2 => this.lastLogEntryTerm
    case 3 => this.membershipState
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "InstallSnapshotST"
}