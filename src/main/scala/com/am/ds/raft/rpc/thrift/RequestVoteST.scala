/**
 * Generated by Scrooge
 *   version: 3.14.1
 *   rev: a996c1128a032845c508102d62e65fc0aa7a5f41
 *   built at: 20140501-114733
 */
package com.am.ds.raft.rpc.thrift

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object RequestVoteST extends ThriftStructCodec3[RequestVoteST] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("RequestVoteST")
  val MemberIdField = new TField("memberId", TType.STRING, 1)
  val MemberIdFieldManifest = implicitly[Manifest[String]]
  val TermField = new TField("term", TType.I32, 2)
  val TermFieldManifest = implicitly[Manifest[Int]]
  val LastLogIndexField = new TField("lastLogIndex", TType.I64, 3)
  val LastLogIndexFieldManifest = implicitly[Manifest[Long]]
  val LastLogTermField = new TField("lastLogTerm", TType.I32, 4)
  val LastLogTermFieldManifest = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      MemberIdField,
      false,
      MemberIdFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      TermField,
      false,
      TermFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      LastLogIndexField,
      false,
      LastLogIndexFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      LastLogTermField,
      false,
      LastLogTermFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: RequestVoteST) {
    if (_item.memberId == null) throw new TProtocolException("Required field memberId cannot be null")
  }

  override def encode(_item: RequestVoteST, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): RequestVoteST = {
    var memberId: String = null
    var _got_memberId = false
    var term: Int = 0
    var _got_term = false
    var lastLogIndex: Long = -1L
    var lastLogTerm: Int = -1
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING => {
                memberId = readMemberIdValue(_iprot)
                _got_memberId = true
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 => {
                term = readTermValue(_iprot)
                _got_term = true
              }
              case _actualType =>
                val _expectedType = TType.I32
            
                throw new TProtocolException(
                  "Received wrong type for field 'term' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 => {
                lastLogIndex = readLastLogIndexValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.I64
            
                throw new TProtocolException(
                  "Received wrong type for field 'lastLogIndex' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 => {
                lastLogTerm = readLastLogTermValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.I32
            
                throw new TProtocolException(
                  "Received wrong type for field 'lastLogTerm' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_memberId) throw new TProtocolException("Required field 'RequestVoteST' was not found in serialized data for struct RequestVoteST")
    if (!_got_term) throw new TProtocolException("Required field 'RequestVoteST' was not found in serialized data for struct RequestVoteST")
    new Immutable(
      memberId,
      term,
      lastLogIndex,
      lastLogTerm,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    memberId: String,
    term: Int,
    lastLogIndex: Long = -1L,
    lastLogTerm: Int = -1
  ): RequestVoteST =
    new Immutable(
      memberId,
      term,
      lastLogIndex,
      lastLogTerm
    )

  def unapply(_item: RequestVoteST): Option[scala.Product4[String, Int, Long, Int]] = Some(_item)


  private def readMemberIdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeMemberIdField(memberId_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(MemberIdField)
    writeMemberIdValue(memberId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeMemberIdValue(memberId_item: String, _oprot: TProtocol) {
    _oprot.writeString(memberId_item)
  }

  private def readTermValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  private def writeTermField(term_item: Int, _oprot: TProtocol) {
    _oprot.writeFieldBegin(TermField)
    writeTermValue(term_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeTermValue(term_item: Int, _oprot: TProtocol) {
    _oprot.writeI32(term_item)
  }

  private def readLastLogIndexValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  private def writeLastLogIndexField(lastLogIndex_item: Long, _oprot: TProtocol) {
    _oprot.writeFieldBegin(LastLogIndexField)
    writeLastLogIndexValue(lastLogIndex_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeLastLogIndexValue(lastLogIndex_item: Long, _oprot: TProtocol) {
    _oprot.writeI64(lastLogIndex_item)
  }

  private def readLastLogTermValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  private def writeLastLogTermField(lastLogTerm_item: Int, _oprot: TProtocol) {
    _oprot.writeFieldBegin(LastLogTermField)
    writeLastLogTermValue(lastLogTerm_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeLastLogTermValue(lastLogTerm_item: Int, _oprot: TProtocol) {
    _oprot.writeI32(lastLogTerm_item)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[RequestVoteST] {
    override def encode(_item: RequestVoteST, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): RequestVoteST = RequestVoteST.decode(_iprot)
  }

  /**
   * The default read-only implementation of RequestVoteST.  You typically should not need to
   * directly reference this class; instead, use the RequestVoteST.apply method to construct
   * new instances.
   */
  class Immutable(
    val memberId: String,
    val term: Int,
    val lastLogIndex: Long,
    val lastLogTerm: Int,
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) extends RequestVoteST {
    def this(
      memberId: String,
      term: Int,
      lastLogIndex: Long = -1L,
      lastLogTerm: Int = -1
    ) = this(
      memberId,
      term,
      lastLogIndex,
      lastLogTerm,
      Map.empty
    )
  }

  /**
   * This Proxy trait allows you to extend the RequestVoteST trait with additional state or
   * behavior and implement the read-only methods from RequestVoteST using an underlying
   * instance.
   */
  trait Proxy extends RequestVoteST {
    protected def _underlying_RequestVoteST: RequestVoteST
    override def memberId: String = _underlying_RequestVoteST.memberId
    override def term: Int = _underlying_RequestVoteST.term
    override def lastLogIndex: Long = _underlying_RequestVoteST.lastLogIndex
    override def lastLogTerm: Int = _underlying_RequestVoteST.lastLogTerm
    override def _passthroughFields = _underlying_RequestVoteST._passthroughFields
  }
}

trait RequestVoteST
  extends ThriftStruct
  with scala.Product4[String, Int, Long, Int]
  with java.io.Serializable
{
  import RequestVoteST._

  def memberId: String
  def term: Int
  def lastLogIndex: Long
  def lastLogTerm: Int

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = memberId
  def _2 = term
  def _3 = lastLogIndex
  def _4 = lastLogTerm

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (memberId ne null) {
              writeMemberIdValue(memberId, _oprot)
              Some(RequestVoteST.MemberIdField)
            } else {
              None
            }
          case 2 =>
            if (true) {
              writeTermValue(term, _oprot)
              Some(RequestVoteST.TermField)
            } else {
              None
            }
          case 3 =>
            if (true) {
              writeLastLogIndexValue(lastLogIndex, _oprot)
              Some(RequestVoteST.LastLogIndexField)
            } else {
              None
            }
          case 4 =>
            if (true) {
              writeLastLogTermValue(lastLogTerm, _oprot)
              Some(RequestVoteST.LastLogTermField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): RequestVoteST = {
    var memberId: String = this.memberId
    var term: Int = this.term
    var lastLogIndex: Long = this.lastLogIndex
    var lastLogTerm: Int = this.lastLogTerm
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        memberId = readMemberIdValue(_blob.read)
      case 2 =>
        term = readTermValue(_blob.read)
      case 3 =>
        lastLogIndex = readLastLogIndexValue(_blob.read)
      case 4 =>
        lastLogTerm = readLastLogTermValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      memberId,
      term,
      lastLogIndex,
      lastLogTerm,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): RequestVoteST = {
    var memberId: String = this.memberId
    var term: Int = this.term
    var lastLogIndex: Long = this.lastLogIndex
    var lastLogTerm: Int = this.lastLogTerm

    _fieldId match {
      case 1 =>
        memberId = null
      case 2 =>
        term = 0
      case 3 =>
        lastLogIndex = -1L
      case 4 =>
        lastLogTerm = -1
      case _ =>
    }
    new Immutable(
      memberId,
      term,
      lastLogIndex,
      lastLogTerm,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetMemberId: RequestVoteST = unsetField(1)

  def unsetTerm: RequestVoteST = unsetField(2)

  def unsetLastLogIndex: RequestVoteST = unsetField(3)

  def unsetLastLogTerm: RequestVoteST = unsetField(4)


  override def write(_oprot: TProtocol) {
    RequestVoteST.validate(this)
    _oprot.writeStructBegin(Struct)
    if (memberId ne null) writeMemberIdField(memberId, _oprot)
    writeTermField(term, _oprot)
    writeLastLogIndexField(lastLogIndex, _oprot)
    writeLastLogTermField(lastLogTerm, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    memberId: String = this.memberId,
    term: Int = this.term,
    lastLogIndex: Long = this.lastLogIndex,
    lastLogTerm: Int = this.lastLogTerm,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): RequestVoteST =
    new Immutable(
      memberId,
      term,
      lastLogIndex,
      lastLogTerm,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[RequestVoteST]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[RequestVoteST]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.memberId
    case 1 => this.term
    case 2 => this.lastLogIndex
    case 3 => this.lastLogTerm
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "RequestVoteST"
}